TITLE:Modern Web Introduction
|
NEXT:
|
PREV:modern_web_introduction
|
DATE:Jan 19, 2017
|
META:Using a CSS preprocessor, Bootstrap, Gulp, and basic HTML and CSS to make a beautiful static webpage
|
<p>
Extended development with jQuery, HTML and CSS gets tedious and frustrating.
That's why technologies like Bootstrap, CSS preprocessors, and Gulp exist.
</p>
<p>
First let's get started with gulp for easier work flow with an automated build
system. 
</p>
<p>
If you don't have npm and NodeJS installed start off by downloading them. These
can be installed through a simple installer program which can be found <a
href='https://nodejs.org/en/download/'>here</a>. The package manager npm is
vital for modern web development and will be used as a package manager to
install much of the software needed.
</p>
<p>
To bundle our project with all of the necessary dependencies be sure to run
<code>npm init</code> in the root directory of your web app. This will generate
a <code>package.json</code> file that will have the list of dependencies your
project uses as you install packages with json. 
</p>
<p>
When installing a package with npm running the <code>--save</code> option will
add the npm package to the list of dependencies in the
<code>package.json</code> file. Running <code>npm install</code> will
automatically install all of the application's dependencies to the
<code>node_modules/</code> folder to be used. 
</p>

Install gulp through npm notice that we do not need to specify gulp as a
dependency as our web app does not <b>need</b> Gulp for running more that it's
for faster development.
<pre>
<code class="language-bash">
npm install --global gulp
</code>
</pre>
<p>
Create a file named <code>gulpfile.js</code>. This is where your 'makefile' will
go. Now let's do something useful with gulp. 
</p>
Install each of the packages using <code>npm install `package name`</code>
<ul>
    <li>
        Install the <code>gulp-less</code> package for easy Less code compilation.
    </li>
    <li>
        Install <code>gulp-clean-css</code> to as the name implies clean CSS files.
    </li>
    <li>
        Install <code>gulp-rename</code> as a utility in the gulp make file pipeline. 
    </li>
    <li>
        Install <code>uglify</code> to minify CSS files.
    </li>
    <li>
        Install <code>gulp-header</code> to add header information to files.
    </li>
    <li>
        And last but not least one of the most powerful Gulp additions is
        Browser Sync. This enables the development web page to do a <i>hot
        reload</i>. So whenever a change is made in the code and saved the gulp
        process will constantly be running and watch for changes in the files
        of the website and if changes are detected the website will be reloaded
        in the browser. This package can be found at <code>browser-sync</code>.
    </li>
</ul>
Now to get started this is a basic Gulp script. This gulp script was largely
adapted from the basic bootstrap gulp script. I have found about this script to
be sufficient in the cases I am using Gulp. 
<pre>
    <code class='language-javascript'>
var gulp = require('gulp');
var less = require('gulp-less');
var browserSync = require('browser-sync').create();
var header = require('gulp-header');
var cleanCSS = require('gulp-clean-css');
var rename = require("gulp-rename");
var uglify = require('gulp-uglify');
var pkg = require('./package.json');

var banner = ['/*!\n',
    ' * Start Bootstrap - <%= pkg.title %> v<%= pkg.version %> (<%= pkg.homepage %>)\n',
    ' * Copyright 2013-' + (new Date()).getFullYear(), ' <%= pkg.author %>\n',
    ' * Licensed under <%= pkg.license.type %> (<%= pkg.license.url %>)\n',
    ' */\n',
    ''
].join('');

// Compile LESS files from /less into /css
gulp.task('less', function() {
    return gulp.src('less/freelancer.less')
            .pipe(less())
            .pipe(header(banner, { pkg: pkg }))
            .pipe(gulp.dest('css'))
            .pipe(browserSync.reload({
                stream: true
            }))
});


// Minify compiled CSS
gulp.task('minify-css', ['less'], function() {
    return gulp.src('css/freelancer.css')
            .pipe(cleanCSS({ compatibility: 'ie8' }))
            .pipe(rename({ suffix: '.min' }))
            .pipe(gulp.dest('css'))
            .pipe(browserSync.reload({
                stream: true
            }))
});

// Minify JS
gulp.task('minify-js', function() {
    return gulp.src('js/freelancer.js')
        .pipe(uglify())
        .pipe(header(banner, { pkg: pkg }))
        .pipe(rename({ suffix: '.min' }))
        .pipe(gulp.dest('js'))
        .pipe(browserSync.reload({
            stream: true
        }))
});
                                                                
// Copy vendor libraries from /node_modules into /vendor
gulp.task('copy', function() {
    gulp.src(['node_modules/bootstrap/dist/**/*', '!**/npm.js', '!**/bootstrap-theme.*', '!**/*.map'])
        .pipe(gulp.dest('vendor/bootstrap'))

    gulp.src(['node_modules/jquery/dist/jquery.js', 'node_modules/jquery/dist/jquery.min.js'])
        .pipe(gulp.dest('vendor/jquery'))

    gulp.src([
            'node_modules/font-awesome/**',
            '!node_modules/font-awesome/**/*.map',
            '!node_modules/font-awesome/.npmignore',
            '!node_modules/font-awesome/*.txt',
            '!node_modules/font-awesome/*.md',
            '!node_modules/font-awesome/*.json'
        ])
        .pipe(gulp.dest('vendor/font-awesome'))
})

// Run everything
gulp.task('default', ['less', 'minify-css', 'minify-js', 'copy']);

// Configure the browserSync task
gulp.task('browserSync', function() {
    browserSync.init({
        server: {
            baseDir: ''
        },
    })
})

// Dev task with browserSync
gulp.task('dev', ['browserSync', 'less', 'minify-css', 'minify-js'], function() {
    gulp.watch('less/*.less', ['less']);
    gulp.watch('css/*.css', ['minify-css']);
    gulp.watch('js/*.js', ['minify-js']);
    // Reloads the browser whenever HTML or JS files change
    gulp.watch('*.html', browserSync.reload);
    gulp.watch('js/**/*.js', browserSync.reload);
});

</code>
</pre>
