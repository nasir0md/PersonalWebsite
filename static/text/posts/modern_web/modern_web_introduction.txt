TITLE:Modern Web Introduction
|
NEXT:
|
PREV:
|
DATE:Jan, 19, 2017
|
META:A introduction to setting up a development environment to work with the modern web. 
|
<p>
	<b>These tutorials will be periodically updated.</b>
</p>
<p>
	Web development is no longer throwing together a bunch of static HTML, JavaScript, and CSS files. The process of web development is now full of frameworks and modern web technologies to make development "easy". 
</p>
<p>
	Modern web development is so full of different frameworks that
effectively achieve the same result. This complete lack of standardization and
excessiveness of choice comes off as very intimidating for beginners. It was a
while before I decided it was time to give up on making vanilla JavaScript,
HTML, and CSS powered websites and take some time to figure out the world of
modern web development. And trust me, now I don't know how I survived without 
the web development technologies that exist today. 
</p>
<p>
	A big first step of web development is actually getting the web
development environment configured. I struggled with <i>days</i> of installing
dependencies, finagling configuration files, and constantly starting all over
again just to have my project not even work. 
</p>
<p>
	Once I got my project compiling and running I was then missing the next
step. How did this modern web technology relate to what I already know?
</p>
<p>
	I hope that this tutorial will provide guidance in setting up and
working with a modern web stack from the perspective of someone who is
experienced with vanilla HTML, JavaScript/jQuery, and CSS. 
</p>
<p>
	I will address the technologies that I normally use depending on the
case. Note that all of these development tutorials will be tailored to working
on macOS. 
</p>
Case 1: Simple Static Application
<ul>
	<li>Vanilla HTML</li> 
	<li>JavaScript</li> 
	<li>jQuery</li>
	<li>Less/Sass</li> 
	<li>Bootstrap</li>
	<li>Gulp build system</li>
	<li>Apache</li>
</ul>
Case 2: Complex Static Application
<ul>
	<li>VueJS</li>
	<li>Less/Sass</li>
	<li>Bootstrap</li>
	<li>Apache</li>
</ul>
Case 3: Dynamic Application (route #1)
<ul>
	<li>VueJS</li>
	<li>Less/Sass</li>
	<li>Boostrap</li>
	<li>Laravel</li>
	<li>MySQL</li>
	<li>Apache</li>
</ul>	
Case 3: Dynamic Application (route #2)
<ul>
	<li>VueJS</li>
	<li>Less/Sass</li>
	<li>Boostrap</li>
	<li>Django</li>
	<li>MySQL</li>
	<li>Nginx</li>
</ul>
Case 4: Data Processing Heavy Dynamic Application
<ul>
	<li>VueJS</li>
	<li>Less/Sass</li>
	<li>Boostrap</li>
	<li>Laravel</li>
	<li>MySQL</li>
	<li>Apache</li>
	<li>Django</li>
	<li>AWS S3</li>
	<li>AWS SQS</li>
	<li>Nginx</li>
</ul>

<p>
	I will go over the use case for each technology separately and describe
how it fits in with the other technologies rather than going over use cases. 
</p>
